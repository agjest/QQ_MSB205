---
title: "Maps and Projections 2"
subtitle: "Projections"  
author: "Arnstein Gjestland"
institute: "HVL"
date: "Spring 2021 (revised autumn 2022)"
format:
  revealjs:
        theme: simple
        footer: '[MSB205](/index.html)'
        reveal_options:
        code-fold: show
        incremental: true
        smaller: true
        scrollable: true
        slide-number: c/t
editor: visual
editor_options:
  markdown:
    wrap: 72
    canonical: true
    chunk_output_type: console
echo: true
eval: true
bibliography: [proj2.bib, proj2-packages.bib]
nocite: '@*'
---

```{r setup}
#| include: false
suppressPackageStartupMessages({
  library(tidyverse)
  library(ggplot2)
  library(maps)
  library(mapproj)
  library(tmap)
  library(rmapshaper)
  library(sf)
  library(spData)
  library(spDataLarge)
  library(stars)
  library(mapview)
  library(rgdal)
  library(rgeos)
  library(rnaturalearth)
  library(rnaturalearthhires)
  library(plotly)
  library(units)
  library(tmaptools)
  library(ggrepel)
})
```

```{r}
#| include: false
# create a bib file for the R packages
# used in this document
# Note! Needs to do a touch ag_model_basics.bib in terminal before first run
# else stops when bibliography: "ag_model_basics.bib" not found in YAML
knitr::write_bib(
  c(
  "tidyverse",
  "ggplot2",
  "maps",
  "mapproj",
  "tmap",
  "rmapshaper",
  "sf",
  "spData",
  "stars",
  "mapview",
  "rgdal",
  "rgeos",
  "rnaturalearth",
  "plotly",
  "units",
  "tmaptools",
  "ggrepel"
    ),
  file = "proj2-packages.bib"
  )
```

```{r HgsdOgOmegn}
#| echo: false
HgsdOgOmegn <- read_sf("HgsdOgOmegn.gpkg")
```

```{r}
HgsdOgOmegn %>% 
  ggplot() +
  geom_sf(aes(fill = knavn))
```

## Standard projections for Norway

[Standard projections for
Norway](https://www.kartverket.no/globalassets/til-lands/euref89_ntm_beskrivelse.pdf)

[https://epsg.io/](https://epsg.io/6172)

> EUREF89 UTM (Universal Transversal Mercator-projeksjon) er i løpet
> av 1. halvår 2009 innført som offisielt datum og projeksjon i alle
> landets kommuner. Innføringen av EUREF89 har gitt oss et moderne,
> homogent og nøyaktig geodetisk grunnlag som for de fleste praktiske
> formål kan ansees som feilfritt. (Kilde:
> https://www.kartverket.no/globalassets/til-lands/euref89_ntm_beskrivelse.pdf)

## Standard projections for Norway cont.

-   EPSG:5972 ETRS89 / UTM zone 32 + NN2000 height (Sør Norge, Norway -
    onshore - between 6°E and 12°E.)
-   EPSG:5973 ETRS89 / UTM zone 33 + NN2000 height (East Hedemark,
    Trøndelag-Troms, Norway - onshore - between 12°E and 18°E.)
-   EPSG:5975 ETRS89 / UTM zone 35 + NN2000 height (Finnmark, Norway -
    onshore - between 24°E and 30°E.)
-   EUREF89 er det offisielle geodetiske datumet i Norge. Internasjonalt
    brukes navnet European Terrestrial Reference System 1989 (ETRS89) om
    samme datum. (Kilde: https://no.wikipedia.org/wiki/EUREF89)
-   ED50: ED50 er ei regional referanseramme (geodetisk datum) som
    dekker Europa. ED50 har vore tilgjengeleg sidan 1950, og Noregs
    hovudkartserie i målestokk 1 : 50000, N50 (tidlegare M711) brukte
    tidlegare denne referanseramma. No blir N50-serien gjeven ut med
    referanseramme EUREF89. (Kilde:
    https://www.kartverket.no/til-lands/posisjon/referanserammer-for-noreg)

## Standard projections for Norway cont.

-   NN2000, *vertikalt datum*, offisielt høydesystem for Norge, Sverige
    og Finland. I nyere kart og publikasjoner er høyde over havet
    oppgitt i NN2000.Også kjent som normalnull 2000.
    (Kilde:https://snl.no/NN2000)
-   Geoide er det teoretiske nivået havoverflaten ville ligget på hvis
    vi trekker fra effekter av tidevann, havstrømmer og bølger. Geoiden
    påvirkes av jordas gravitasjonsfelt, og dette er ikke det samme over
    alt. Geoiden er et viktig utgangspunkt for høydemålinger. (Kilde:
    https://snl.no/geoide)
-   Et *horisontalt datum* inneholder parametre (størrelse og
    flattrykning) for en jordellipsoide og dens plassering i forhold til
    jordkroppen. Det punktet som forankrer koordinatsystemet til
    jordkroppen kalles fundamentalpunktet.
    (Kilde:https://snl.no/geodetisk_datum)

## Previous Norwegian "standards"

Ask `rgdal`.

```{r}
#| cache: true
# rgdal knows datums
ngo48 <- make_EPSG() %>% 
  filter(str_detect(note, 'NGO 1948'))
```

```{r}
#| eval: false
ngo48 %>% 
  select(code, note)

ngo48 %>% 
  select(prj4)

ngo48 %>% 
  select(code, prj_method)
```

## Previous Norwegian "standards" cont.

```{r}
#| echo: false
ngo48 %>% 
  select(code, note)
```

## Previous Norwegian "standards" cont.

```{r}
#| echo: false
ngo48 %>% 
  select(prj4)

```

## Previous Norwegian "standards" cont.

```{r}
#| echo: false
ngo48 %>% 
  select(code, prj_method)
```

## Previous Norwegian "standards" cont.

-   NGO1948 er et nasjonalt norsk geodetisk datum og koordinatsystem,
    som ble brukt fram til 2009.Fundamentalpunktet er i Observatoriet i
    Oslo.
-   For NGO-48 er det Oslo gamle observatorium som er 0.
    (http://www.milvang.no/gps/gpsconv/gpsconv.html).
-   Virker som det er litt forvirring rundt dette, SNL viser til Oslo
    solobservatorium som fundamentalpunktet.

## Simplify

```{r}
#| cache: true
# cache: true so that we don't simplify multiple times
HgsdOgOmegn <- HgsdOgOmegn %>% 
  #simplify it
  ms_simplify(
    keep = 0.05, 
    keep_shapes = TRUE
    )
```

## Projected

::: columns
::: {.column width="35%"}
```{r}
# axes order NOT according 
# to authority
st_axis_order(FALSE)

pHgsd <- HgsdOgOmegn %>% 
  select(knavn) %>% 
  st_transform('EPSG:5972') %>% 
  ggplot() + 
  geom_sf(aes(fill = knavn)) +
  # to get rid of degree on axes
  coord_sf(datum = NULL) +
  theme(legend.position="bottom")
```
:::

::: {.column width="65%"}
```{r}
#| echo: false

pHgsd

```
:::
:::

## Same map with tmap

-   Perhaps easier with tmap

. . .

::: columns
::: {.column width="40%"}
```{r}
#| cache: true
#| echo: true

# Don't respect authorities
st_axis_order(FALSE)

pHgsd_tm <- HgsdOgOmegn %>% 
  select(knavn) %>% 
  st_transform('EPSG:5972') %>% #<<
  tm_shape() +
  tm_polygons("knavn") +
  tm_grid()
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
pHgsd_tm
```
:::
:::

## UTM (fra wikipedia.org)

-   [UTM
    zones](https://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system#/media/File:Universal_Transverse_Mercator_zones.svg)

-   Note! 31V, 32V, 31X, 33C, 35X og 37X

-   Else 6° wide, 8° high

-   The scale factor at the central meridian is specified to be 0.9996
    of true scale

-   The Mercator projection is conformal, which means it preserves
    angles and therefore shapes across small regions. However, it
    distorts distance and area.

-   Covers 80°S to 84°N

## UTM (fra wikipedia.org) cont.

-   Latitude bands not strictly part of UTM
    -   runs from C to X (excluding I and O)
    -   A, B Antarctica and Y, Z Arctic
-   Vertical axes, meters from equator
-   Horizontal axes
    -   Mid Meridian of a zone at 500.000
    -   498.500 means 1.500 meters west of center meridian of zone
    -   507.036 means 7036 meters east of center meridian of zone
    -   if both obs. on same latitude the distance between them is
        507.036 - 498.500 = 8526 meters
    -   if not same latitude, use pytagoras
-   Note! Horizontal axis neither starts at 0 nor ends at 1.000.000

## Norske fylker long/lat 4326 and projected

::: columns
::: {.column width="50%"}
```{r}
#| cache: true
Norge_fylke <- read_sf("Norge_fylke.gpkg") %>% 
  ms_simplify(
    keep = 0.001,
    keep_shapes = TRUE
    )

```

```{r}
p1 <- Norge_fylke %>% 
  select(fnr) %>%
  tm_shape() +
  tm_fill() +
  tm_borders() +
  tm_graticules() +
  tm_layout(title = "EPSG:4326 WGS 84") +
  tm_compass(
    type = "8star",
    position = c("left", "top")
    ) +
  tm_scale_bar(
    breaks = c(0, 100, 200), 
    text.size = 1
    )
```
:::

::: {.column width="50%"}
```{r}
p2 <- Norge_fylke %>% 
  select(fnr) %>%
  st_transform(5972) %>% 
  tm_shape() +
  tm_fill() +
  tm_grid() +
  tm_borders() +
  tm_layout(
    title = "EPSG:5972\n
    ETRS89 / UTM zone 32 + NN2000 height",
    scale = 1
    ) +
  tm_compass(
    type = "8star",
    position = c("left", "top")
    ) +
  tm_scale_bar(
    breaks = c(0, 100, 200),
    text.size = 1
    )
```
:::
:::

## Norske fylker long/lat WGS 84 EPSG 4326 cont.

::: columns
::: {.column width="50%"}
```{r}
p3 <- Norge_fylke %>% 
  select(fnr) %>%
  st_transform(5973) %>% 
  tm_shape() +
  tm_fill() +
  tm_grid() +
  tm_borders() +
  tm_layout(
    title = "EPSG:5973\n
    ETRS89 / UTM zone 33 + NN2000 height"
    ) +
  tm_compass(
    type = "8star", 
    position = c("left", "top")
    ) +
  tm_scale_bar(
    breaks = c(0, 100, 200),
    text.size = 1
    )
```
:::

::: {.column width="50%"}
```{r}
p4 <- Norge_fylke %>% 
  select(fnr) %>%
  st_transform(5975) %>% 
  tm_shape() +
  tm_fill() +
  tm_grid() +
  tm_borders() +
  tm_layout(
    title = "EPSG:5975\n 
    ETRS89 / UTM zone 35 + NN2000 height"
    ) +
  tm_compass(
    type = "8star", 
    position = c("left", "top")) +
  tm_scale_bar(
    breaks = c(0, 100, 200), 
    text.size = 1
    )
```
:::
:::

## Result

```{r}
tmap_arrange(p1, p2, p3, p4)
```

## Southern Norway

::: columns
::: {.column width="50%"}
```{r}
#| cache: true
#| #Norge_fylke_syd <- read_sf("Norge_fylke.gpkg", 
# query="SELECT * FROM Norge_fylke WHERE navn 
# IN ('Østfold', 'Akershus', 'Oslo', 'Hedmark', 'Oppland', 
# 'Buskerud', 'Vestfold', 'Telemark', 'Aust-Agder', 
# 'Vest-Agder', 'Rogaland', 'Hordaland', 'Sogn og Fjordane', 
# 'Møre og Romsdal', 'Sør-Trøndelag')")
# OR
Norge_fylke_syd <- read_sf(
  "Norge_fylke.gpkg",
  query = "SELECT * FROM Norge_fylke WHERE navn 
  NOT IN ('Nord-Trøndelag', 'Nordland',
  'Troms', 'Finnmark')") %>% 
  #check size
  ms_simplify(
    keep = 0.01, 
    keep_shapes = TRUE
    )
```

```{r}
p5 <- Norge_fylke_syd %>% 
  select(fnr) %>%
  tm_shape() +
  tm_fill() +
  tm_borders() +
  tm_graticules() +
  tm_layout(
    title = "EPSG:4326 WGS 84",
    scale = 1
    ) +
  tm_compass(
    type = "8star", 
    position = c("left", "top")
    ) +
  tm_scale_bar(
    breaks = c(0, 100, 200),
    text.size = 1
    )
```
:::

::: {.column width="50%"}
```{r}
p6 <- Norge_fylke_syd %>% 
  select(fnr) %>%
  st_transform(5972) %>% 
  tm_shape() +
  tm_fill() +
  tm_borders() +
  tm_layout(
    title = "EPSG:5972\n
    ETRS89 / UTM zone 32 + NN2000 height",
    scale = 1
    ) +
  tm_grid() +
  tm_compass(
    type = "8star", 
    position = c("left", "top")
    ) +
  tm_scale_bar(
    breaks = c(0, 100, 200), 
    text.size = 1
    )
```
:::
:::

## Result

```{r}
tmap_arrange(p5, p6)
```

## Result cont.

-   UTM

    -   North: Meters from equator

    -   East: Offset from the zone central meridian (set at 500000).

        -   Width is 6° longitude. UTM eastings range from about 167000
            meters to 833000 meters at the equator
            ([wikipedia.org](https://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system)).

-   One exception zone UTM 32V is 9° longitude wide and UTM 31V is 3°.

## UTM Europe map

![UTM Europe (in Public Domain, taken from
[wikipedia](https://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system)).](index_insertimage_1.png){alt="Plot title."}

## Calculations Rogaland

-   NB! We **MUST** use **projected** map for area calculations.

. . .

```{r}
# Rogaland
Norge_fylke_syd %>% 
  select(fnr) %>%
  filter(fnr == '11') %>% 
  st_transform(5972) %>%
  st_area()
```

## Calculations Sør-Norge

```{r}
# Sør-norge
Norge_fylke_syd <- Norge_fylke_syd %>% 
  select(fnr, navn) %>%
  st_transform(5972) %>%
  mutate(area = st_area(.))
```

## Calculations Sør-Norge

```{r}
Norge_fylke_syd
```

## Calculations Sør-Norge (km\^2)

```{r}
# Sør-norge
Norge_fylke_syd <- Norge_fylke_syd %>% 
  select(fnr, navn) %>%
  st_transform(5972) %>%
  # convert to km^2 via units package
  mutate(area_km2 = set_units(st_area(.), km^2))
```

## Calculations Sør-Norge (km\^2)

```{r}
Norge_fylke_syd
```

## Conclusion

Norway:

-   Use EPSG:4326 (latitude/longitude **or** longitude/latitude ) for
    geographical coordinates.

. . .

or

-   EPSG:5973 for projected (whole of Norway)

-   EPSG:5972 for Southern Norway

-   Unit is meters.

-   To measure distance or area the map **HAS** to be projected.

## Different projections

```{r, echo=TRUE}
# read in world map from rnatrualearth
# The option returnclass = "sf" gives us an sf object
world_ne <- ne_countries(
  scale = "medium", 
  returnclass = "sf"
  )
```

```{r, echo=TRUE}
class(world_ne)
```

## The longitude latitude problem

-   Geographers prefer latitude first, longitude second
-   Data scientists and GIS programmer often use longitude first,
    latitude second
-   For some projections the axis order **is not** specified
-   For some projections the axis order **is** specified, but often
    ignored in software
-   **This will give us a lot of problems**

## Axis order EPSG:4326

![EPSG:4326](map_and_proj_pres_insertimage_2.png){alt="EPSG:4326"}

-   The authorities say latitude first, longitude second

## Axis order

```{r}
# Default is FALSE
st_axis_order()
```

-   Obey the authorities

. . .

```{r}
st_axis_order(authority_compliant = TRUE)
```

-   Set it back to default

. . .

```{r}
st_axis_order(authority_compliant = FALSE)
```

## The crs of world_ne

```{r}
st_crs(world_ne)
```

## The crs of world_ne cont.

-   In output from `st_crs(world_ne)`we see that world_ne is in
    EPSG",4326

-   TARGETRCRS

    -   AXIS\["latitude",north, ORDER\[1\],

    -   AXIS\["longitude",east, ORDER\[2\]

## Plot our world map with plot.sf, geographical coordinates

::: columns
::: {.column width="30%"}
```{r}
# Get axis order
st_axis_order()
```

```{r}
#| eval: false
# Follow authorities
st_axis_order(
  authority_compliant = TRUE
  )

world_ne %>% 
  # Select one of the 
  # features (variables)
  select(gu_a3) %>%
  # plot with plot.sf
  plot()
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
# Follow authoritie
st_axis_order(
  authority_compliant = TRUE
  )

# Plot with plot.sf
world_ne %>% 
  # Select one of the features (variables)
  select(gu_a3) %>%
  # plot with plot.sf
  plot()
```
:::
:::

## Plot our world map with ggplot, geographical coordinates

::: columns
::: {.column width="30%"}
```{r}
# Get axis order
st_axis_order()
```

```{r}
#| eval: false
# plot with ggplot
world_ne %>% 
  select(sovereignt) %>% 
  ggplot() +
  geom_sf() +
  coord_sf(expand = FALSE)
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
# plot with ggplot
world_ne %>% 
  select(sovereignt) %>% 
  ggplot() +
  geom_sf() +
  coord_sf(expand = FALSE)
```
:::
:::

## EPSG:3395 mecator

![EPSG:3395
mecator](map_and_proj_pres_insertimage_3.png){alt="EPSG:3395 mecator"}

-   Longitude first, latitude second

# 3395 mecator ggplot

::: columns
::: {.column width="30%"}
```{r}
# Get axis order
st_axis_order()
```

```{r}
#| eval: false
world_ne %>% 
  st_transform("EPSG:3395") %>% 
  ggplot() +
  geom_sf() +
  coord_sf(
    ylim = c(-12000000, 15000000), 
    datum = st_crs(3395),
    expand = FALSE
    )
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
world_ne %>% 
  st_transform("EPSG:3395") %>% 
  ggplot() +
  geom_sf() +
  coord_sf(
    ylim = c(-12000000, 15000000),
    datum = st_crs(3395),
    expand = FALSE
    )
```
:::
:::

## World Behrmann ESRI:54017 ggplot

::: columns
::: {.column width="30%"}
```{r}
# Get axis order
st_axis_order()
```

```{r}
#| eval: false
world_ne %>% 
  st_transform("ESRI:54017") %>% 
  ggplot() +
  geom_sf() +
  coord_sf(
    datum = st_crs("ESRI:54017"),
    expand = FALSE
    )
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
world_ne %>% 
  st_transform("ESRI:54017") %>% 
  ggplot() +
  geom_sf() +
  coord_sf(
    datum = st_crs("ESRI:54017"),
    expand = FALSE
    )
```
:::
:::

## WGS 84 / Pseudo-Mercator -- Spherical Mercator, Google Maps, OpenStreetMap, Bing, ArcGIS, ESRI

::: columns
::: {.column width="30%"}
```{r}
# Get axis order
st_axis_order()
```

```{r}
#| eval: false
world_ne %>% 
  st_transform("EPSG:3857") %>% 
  ggplot() +
  geom_sf() +
  coord_sf(
    ylim = c(-1.3e+07, 2e+07), 
    datum = st_crs("EPSG:3857"), 
    expand = FALSE
    )
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
#| eval: true
world_ne %>% 
  st_transform("EPSG:3857") %>% 
  ggplot() +
  geom_sf() +
  coord_sf(
    ylim = c(-1.3e+07, 2e+07), 
    datum = st_crs("EPSG:3857"), 
    expand = FALSE
    )
```
:::
:::

## World Mollweide ESRI 54009

::: columns
::: {.column width="30%"}
```{r}
# Get axis order
st_axis_order()
```

```{r}
#| eval: false
world_ne %>% 
  st_transform("ESRI:54009") %>% 
  ggplot() +
  geom_sf() +
  coord_sf(
    datum = st_crs("ESRI:54009"),
    expand = FALSE
    ) +
  labs(title = "World Mollweide ESRI 54009")
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
world_ne %>% 
  st_transform("ESRI:54009") %>% 
  ggplot() +
  geom_sf() +
  coord_sf(
    datum = st_crs("ESRI:54009"),
    expand = FALSE
    ) +
  labs(title = "World Mollweide ESRI 54009")
```
:::
:::

## 3035

-   EPSG:3035
-   ETRS89-extended / LAEA Europe
-   Scope: Statistical mapping at all scales and other purposes where
    true area representation is required.
-   Coordinate system: Cartesian 2D CS. **Axes: northing, easting
    (Y,X)**. Orientations: north, east. UoM: m.

## 3035

::: columns
::: {.column width="30%"}
```{r}
# Get axis order
st_axis_order()
```

```{r}
#| eval: false
world_ne %>%
  select(continent) %>% 
  st_transform(3035) %>% 
  ggplot() +
  geom_sf(aes(fill = continent)) +
  coord_sf(crs = 3035)
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
world_ne %>%
  select(continent) %>% 
  st_transform(3035) %>% 
  ggplot() +
  geom_sf(aes(fill = continent)) +
  coord_sf(crs = 3035)
```
:::
:::

## 3035 is longitude latitude

-   WGS 84 / Pseudo-Mercator
-   The importance of authority_compliant
-   3035 is (latitude, longitude)
-   our map is (longitude, latitude)
-   if we insist to be authority_compliant, we will use longitude value
    for latitude
-   and latitude value for longitude
-   **unless we swap axis order**

## 3035 is longitude latitude

-   `authority_compliant = TRUE` gives an untraditional map

. . .

::: columns
::: {.column width="30%"}
```{r}
st_axis_order()
```

```{r}
#| eval: false
# Untraditional map
st_axis_order(
  authority_compliant = TRUE
  )
world_ne %>%
  st_transform(3035) %>%
  ggplot() +
  geom_sf(aes(fill = continent)) +
  coord_sf(crs = 3035)
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
# Untraditional map
st_axis_order(authority_compliant = TRUE)
world_ne %>%
  st_transform(3035) %>%
  ggplot() +
  geom_sf(aes(fill = continent)) +
  coord_sf(crs = 3035)
```
:::
:::

## 3035 is longitude, latitude (solution: axisswap)

-   Swap axis by `st_transform` and pipeline argument.

. . .

::: columns
::: {.column width="40%"}
```{r}
#| eval: false
# First coordinate interprated as latitude, second as longitude
# as specified by authorities. But in reality world_ne has longitude
# as first coordinate and latitude as second (as normal for GIS software)
st_axis_order(authority_compliant = TRUE)
world_ne %>%
  st_transform(3035) %>%
    st_transform(
      # have to swap the axis, gives a warning
    pipeline = "+proj=pipeline +step +proj=axisswap +order=2,1"
    ) %>%
  ggplot() +
  geom_sf(aes(fill = continent)) +
  coord_sf(crs = 3035)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
# First coordinate interprated as latitude, second as longitude
# as specified by authorities. But in reality world_ne has longitude
# as first coordinate and latitude as second (as normal for GIS software)
st_axis_order(authority_compliant = TRUE)
world_ne %>%
  st_transform(3035) %>%
    st_transform(
      # have to swap the axis, gives a warning
    pipeline = "+proj=pipeline +step +proj=axisswap +order=2,1"
    ) %>%
  ggplot() +
  geom_sf(aes(fill = continent)) +
  coord_sf(crs = 3035)
```
:::
:::

## 3035 is longitude, latitude (solution: ignore authorities)

-   Ignore authorities **temporarily** by setting
    `authority_compliant = FALSE` in `st_axis_order()`.

-   Then set it back to TRUE after generating map

. . .

::: columns
::: {.column width="40%"}
```{r}
#| eval: false
# First coordinate interprated as latitude, second as longitude
# as specified by authorities. But in reality world_ne has longitude
# as first coordinate and latitude as second (as normal for GIS software)
st_axis_order(authority_compliant = FALSE)
world_ne_3035 <- world_ne %>%
  st_transform(3035) %>%
  ggplot() +
  geom_sf(aes(fill = continent)) +
  coord_sf(crs = 3035)

st_axis_order(authority_compliant = TRUE)
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
# First coordinate interprated as latitude, second as longitude
# as specified by authorities. But in reality world_ne has longitude
# as first coordinate and latitude as second (as normal for GIS software)
st_axis_order(authority_compliant = FALSE)
world_ne_3035 <- world_ne %>%
  st_transform(3035) %>%
  ggplot() +
  geom_sf(aes(fill = continent)) +
  coord_sf(crs = 3035)
```

```{r}
 st_axis_order(authority_compliant = TRUE)
```
:::
:::

## Conclusion ggplot

-   `ggplot()` does not seem to respect authorities
-   What about `tmap` , `tm_shape`, `tm_fill` etc.?

## 3035 with tmap

-   Again an untraditional map

. . .

::: columns
::: {.column width="30%"}
```{r}
#| eval: false
st_axis_order(
  authority_compliant = TRUE
  )

world_ne %>%
  st_transform(3035) %>%
  tm_shape() +
  tm_fill()
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
st_axis_order(
  authority_compliant = TRUE
  )

world_ne %>%
  st_transform(3035) %>%
  tm_shape() +
  tm_fill()
```
:::
:::

## 3035 with tmap (swap axis)

-   `authority_compliant = TRUE`

-   `st_transform(pipeline = "+proj=pipeline +step +proj=axisswap +order=2,1")`

. . .

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
st_axis_order(authority_compliant = TRUE)
world_ne %>%
  st_transform(3035) %>%
  st_transform(
    pipeline = "+proj=pipeline +step +proj=axisswap +order=2,1"
    ) %>%
  tm_shape() +
  tm_fill()
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
st_axis_order(authority_compliant = TRUE)
world_ne %>%
  st_transform(3035) %>%
  st_transform(
    pipeline = "+proj=pipeline +step +proj=axisswap +order=2,1"
    ) %>%
  tm_shape() +
  tm_fill()
```
:::
:::

## 3035 with tmap (ignore authorities)

-   Temporarily ignore authorities

. . .

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
st_axis_order(authority_compliant = FALSE)
world_ne %>%
  st_transform(3035) %>%
  tm_shape() +
  tm_fill()

st_axis_order(authority_compliant = TRUE)
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
st_axis_order(authority_compliant = FALSE)
world_ne %>%
  st_transform(3035) %>%
  tm_shape() +
  tm_fill()

st_axis_order(authority_compliant = TRUE)
```
:::
:::

## Conclusion

-   `plot()` (i.e. `plot.sf()`) **respects** authorities
-   With `tmap` and `ggplot` we have to do
    -   `st_transform(pipeline = "+proj=pipeline +step +proj=axisswap +order=2,1")`

    -   or

    -   set `st_axis_order(authority_compliant = FALSE)` temporarily.
-   Note that this might change when `tmap` and `ggplot` get updated.

## A Gardian world view ;-)

```{r}
#| echo: true
#| eval: false
world_ne %>%
  select(continent) %>%
  # centre of map is Gard Haugesund
  st_transform(
    crs = "+proj=laea +x_0=0 +y_0=0 +lon_0=5.265393 +lat_0=59.425333"
    ) %>% 
  plot(key.pos = 1)
```

## A Gardian world view ;-)

```{r}
#| echo: false
#| eval: true
world_ne %>%
  select(continent) %>% 
  st_transform(
    crs = "+proj=laea +x_0=0 +y_0=0 +lon_0=5.265393 +lat_0=59.425333"
    ) %>% 
  plot(key.pos = 1)
```

## Projections not supporten in `st_transpose`

-   `st_transform()` uses GDAL lib
-   `lwgeom::st_transform_proj()` uses PROJ API directly

## Winkel tripel with `st_transform_proj()`

-   Winkel triple projection not supported by `st_transform()`
-   We have to use `st_transform_proj()` and do a little more work "by
    hand"
-   The following is inspired by
    [wilkelab](https://wilkelab.org/practicalgg/articles/Winkel_tripel.html)
-   We use our map from `rnaturalearth`. Wilke gets his map with
    `getMap()` from the `rworldmap` package
-   We follow the authorities and have to get the axis correct first

## Getting the axis in the right order

```{r}
st_axis_order(authority_compliant = TRUE)
world_ne <- ne_countries(scale = "medium", returnclass = "sf")  %>% 
  select(continent) 
```

-   Define our projection, and transform our map to this projection
-   It seems that `ne_countries()` get the axis correct when we set
    `authority_compliant = TRUE`
-   `axisswap` not required

. . .

```{r}
crs_wintri <- "+proj=wintri +datum=WGS84 +no_defs +over"
world_wintri <- world_ne %>% 
#  st_transform(4326) %>%
#  st_transform(pipeline ="+proj=pipeline +step +proj=axisswap +order=2,1") %>% 
  st_transform_proj(crs = crs_wintri)
```

## make graticule

-   Since we are using `st_transform_proj()` we have to make our own
    graticule and set the right projection on it (Winkel triple)

. . .

```{r}
grat_wintri <- 
  st_graticule(lat = c(-89.9, seq(-80, 80, 20), 89.9)) %>%
  st_transform_proj(crs = crs_wintri) 
```

## plot graticule

::: columns
::: {.column width="35%"}
```{r}
#| echo: true
#| eval: false
grat_wintri %>% 
  ggplot() + 
  geom_sf(
    color = "gray30", 
    size = 0.25/.pt
    ) + 
  coord_sf(datum = NULL)
```
:::

::: {.column width="65%"}
```{r}
#| echo: false
#| eval: true
grat_wintri %>% 
  ggplot() + 
  geom_sf(
    color = "gray30", 
    size = 0.25/.pt
    ) + 
  coord_sf(datum = NULL)
```
:::
:::

## First shot at a map

::: columns
::: {.column width="30%"}
```{r}
#| echo: true
#| eval: false
  ggplot() + 
  geom_sf(
    data = grat_wintri, 
    color = "gray30", 
    size = 0.25/.pt) + 
  geom_sf(
    data = world_wintri, 
    color = "black", 
    size = 0.5/.pt) +
  coord_sf(datum = NULL)
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
#| eval: true
  ggplot() + 
  geom_sf(
    data = grat_wintri, 
    color = "gray30", 
    size = 0.25/.pt) + 
  geom_sf(
    data = world_wintri, 
    color = "black", 
    size = 0.5/.pt) +
  coord_sf(datum = NULL)
```
:::
:::

## Improve map with blue background

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
# vectors of latitudes and longitudes 
# that go once around the 
# globe in 1-degree steps
lats <- c(90:-90, -90:90, 90)
longs <- c(
  rep(c(180, -180), each = 181), 
  180
  )
```

```{r}
#| eval: false
# turn into correctly projected sf collection
wintri_outline <- 
  list(cbind(longs, lats)) %>%
  st_polygon() %>%
  st_sfc( # create sf geometry list column
    crs = "+proj=longlat +ellps=WGS84 
    +datum=WGS84 +no_defs"
  ) %>% 
  st_sf() %>%
  # transform to Winkel tripel
  st_transform_proj(crs = crs_wintri) 
```

```{r}
#| eval: false
ggplot() + 
  geom_sf(data = wintri_outline, 
          fill = "#56B4E950", 
          color = "grey30", 
          size = 0.5/.pt) +
  coord_sf(datum = NULL)
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
# vectors of latitudes and longitudes 
# that go once around the 
# globe in 1-degree steps
lats <- c(90:-90, -90:90, 90)
longs <- c(
  rep(c(180, -180), each = 181), 
  180
  )
```

```{r}
#| echo: false
# turn into correctly projected sf collection
wintri_outline <- 
  list(cbind(longs, lats)) %>%
  st_polygon() %>%
  st_sfc( # create sf geometry list column
    crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
  ) %>% 
  st_sf() %>%
# transform to Winkel tripel
  st_transform_proj(crs = crs_wintri)

```

```{r}
#| echo: false
ggplot() + 
  geom_sf(data = wintri_outline, 
          fill = "#56B4E950", 
          color = "grey30", 
          size = 0.5/.pt) +
  coord_sf(datum = NULL)
```
:::
:::

## The final Winkel triple map. CODE

```{r}
#| echo: true
#| eval: false
ggplot() + 
  geom_sf(data = wintri_outline, 
          fill = "#56B4E950", 
          color = "grey30", 
          size = 0.5/.pt) +
  geom_sf(data = grat_wintri, color = "gray30", size = 0.25/.pt) + 
  geom_sf(data = world_wintri, 
          aes(fill = continent), 
          color = "black", 
          size = 0.5/.pt) +
  coord_sf(datum = NULL)
```

## The final Winkel triple map. PLOT

```{r}
#| echo: false
#| eval: true
final_winkel_world <- ggplot() + 
  geom_sf(data = wintri_outline, 
          fill = "#56B4E950", 
          color = "grey30", 
          size = 0.5/.pt) +
  geom_sf(data = grat_wintri, color = "gray30", size = 0.25/.pt) + 
  geom_sf(data = world_wintri, 
          aes(fill = continent), 
          color = "black", 
          size = 0.5/.pt)
```

## Cran mirrors

```{r}
#| cache: true
Mirrors <- getCRANmirrors(all = FALSE, local.only = FALSE) %>% 
  as_tibble() %>% 
  filter(!str_detect(City, pattern = "0-Cloud.*")) %>%
  pull(City) %>% 
  str_conv("UTF-8") %>% 
  geocode_OSM(as.sf = TRUE, geometry = 'point') %>% 
  st_transform_proj(crs = crs_wintri) %>%
  transmute(city = query) %>% 
  group_by(city) %>% 
  summarise(mirrors = as.character(n())) %>% 
  mutate(
    mirrors = factor(mirrors, levels = c("1", "2", "3"))
  ) 
```

```{r}
#| eval: false
final_winkel_world +
  # add mirrors geom
  geom_sf(
    data = Mirrors, 
    mapping = aes(
      shape = mirrors
      )
    )  +
  # perhaps use geom_text_repel to name the cities with more than 1 mirror
  ggtitle("Location of CRAN mirrors") +
  coord_sf(datum = NULL) 
```

## Cran mirrors plot

```{r}
#| echo: false
final_winkel_world +
  # add mirrors geom
  geom_sf(
    data = Mirrors, 
    mapping = aes(
      shape = mirrors
      )
    )  +
  # perhaps use geom_text_repel to name the cities with more than 1 mirror
  ggtitle("Location of CRAN mirrors") +
  coord_sf(datum = NULL) 
```

## sp versus sf

::: columns
::: {.column width="50%"}
sp

-   Long history (2004-)

-   Many packages in the sp\* system (ca. 450)

-   Works with rgdal and rgeos

-   Uses S4 objects with slots

-   Quite complex structure

-   Does not integrate very well with the Tidyverse (and other tools)

-   Does not implement **Simple Features**
:::

::: {.column width="50%"}
sf

-   "The new sp"

-   Support **Simple Features**

-   Geographical information in **list column**

-   Integrates nicely with the Tidyverse

-   The future for geographical information i R

-   Work in progress (autumn 22: v 1.0-8)
:::
:::

## What is Simple features?

## 

## References
